Hello World. My name is Eric but most people call me "Please Go Away."

Stretch Goals
 Branching
One of the most powerful features of Git is the ability to branch your code. Branching makes a copy of your code at the current point in time that you can make changes to without affecting any other branch! This allows an organization to always keep a fully working production version of their code that can be deployed at any time, and also work on adding features, fixing bugs, etc that often result in things breaking until they are done.

You can also use branches to reduce merge conflicts if multiple team members need to make changes to the same file in a codebase. Each team member should complete the following steps:

 Create a branch. Name your branch something like initials--branch_test. (So for me the actual name of the branch would be st--branch_test)
 Add a file in the root of the project called yourname.txt. Type your name in the file.
Commit and publish (push) your branch to GitHub
 Push your commit to GitHub...then do a pull after the other members of the team have all pushed their branches.
 Switch to one of the new branches in the repository. Notice what happens to the listing of files in your editor when you do. Switch back to your own branch. Switch back to the master branch. Discuss with your team what you saw.
Throughout the semester you will be fixing bugs and adding features to the SleepOutside site. When you assign a task to yourself I would create a new branch to hold the work you will do. Name the branch initials--feature-name. So if I were going to work on the card dealing with the cart total not calculating correctly, and my name were John Doe, I would make a branch with a name something like jd--cart-total-calculation

When you are done with your work and you are confident everything is working you should submit a pull request (see below).

 Pull requests
When you are done with the feature that you created a branch for, the new code should be merged back into the master or main branch. This can be done in two ways...one is by directly merging the working branch back into the main branch, and the other is through a pull request.

On projects where there is only one developer, merging directly works fine...but when working with a team it is more common to work through pull requests. A pull request essentially means "My work is done and tested, I am ready for the code to be merged in with the main branch. Can someone check it out and make sure you don't see any issues. (So I don't break anything :)"

In our case right now, the branches do not contain anything important that needs to be merged back into the main branch. So most of them can just be deleted. Have one person however submit a pull request for their branch so we can see what the process is like.

After the pull request has been made (you can do this through github.com) the driver should go to the repository in GitHub and review the request and then finish the merge. Make sure that any extra branches are deleted once you are done merging.

